


[Run id]
datetime = 


[Paths]
TRAIN_PATH = /data/multi-domain-graph-3/datasets/datasets_preproc_exp/taskonomy/tiny-train_0.15/part1
TRAIN_PATTERNS = /*

VALID_PATH = /data/multi-domain-graph-3/datasets/datasets_preproc_exp/taskonomy/tiny-train_0.15/part2
VALID_PATTERNS = /*

; tiny-taskonomy
; VALID_PATTERNS = /*

; GOT-10k
; PATTERNS = /*/*00001

; GOT-10k_samples
; PATTERNS = /*/00000001_*, /*/00000004_*, /*/00000007_*, /*/00000010_*

EXPERTS_OUTPUT_PATH_TEST = /data/multi-domain-graph-3/datasets/datasets_preproc_exp
PREPROC_GT_PATH_TEST = /data/multi-domain-graph-3/datasets/datasets_preproc_gt
TEST_PATH = taskonomy/tiny-test-ok



[Logs]
tensorboard_dir = runs/
tensorboard_prefix = train_2iters
silent = no
csv_results_dir = csv_results_elena/


[Edge Models]
start_epoch = 40
n_epochs = 0
load_path = /data/multi-domain-graph/models/trained_27ian_minlr1e-3_1e-2wd_plateau_0.02_0-40epochs
save_path = /data/multi-domain-graph/models/elena
save_epochs_distance = 5
save_models = no


[Preprocess]


[Testing]
test_1hop_edges = no
test_min_epoch = 40
test_epoch_step = 10
test_max_epoch = 40


[Training]
train_basic_edges = no
drop_version = -1
eval_test_during_train = no
restr_src_domain = no
src_domain_restr = halftone_gray
train_only_for_new_expert = no


[Training2Iters]
; 1. Run eval on trainingset2 (VALID_PATH) + save outputs
train_2_iters = yes
save_next_iter_dir = /data/multi-domain-graph/datasets/datasets_preproc_gt/iter2/taskonomy/tiny-train_0.15/part2

; 2. Train on trainset2 (TRAIN_PATH) using previously saved outputs as supervision
EXPERTS_OUTPUT_PATH_TRAIN = /data/multi-domain-graph/datasets/datasets_preproc_exp
PREPROC_GT_PATH_TRAIN = /data/multi-domain-graph/datasets/datasets_preproc_gt/iter2
TRAIN_PATH = taskonomy/tiny-train_0.15/part2
; 3. Run eval on testset

[Ensemble]
; mean
; median
; histo
; median10
; ssim_maps_twd_exp_mean
; ssim_maps_twd_exp_median_w
; ssim_maps_twd_exp_median 
; ssim_maps_twd_exp_median_faster
; ssim_maps_btw_tasks_mean
; ssim_maps_btw_tasks_median_w
; ssim_maps_btw_tasks_median
; psnr
; lpips_alex
; lpips_squeeze
;;;;; eplips?
; import elpips
; metric = elpips.Metric(elpips.elpips_vgg(batch_size=1))
; tf_distance = metric.forward(tf_image1, tf_image2)
; distance = sess.run(tf_distance)

; ensemble_fct = lpips_squeeze
; ensemble_fct = psnr
; ensemble_fct = ssim_maps_twd_exp_median_faster
ensemble_fct = ssim_maps_twd_exp_median_faster
use_rgb_to_tsk = no

[FirstK]
first_k_train = 10
first_k_val = -1
first_k_test = -1